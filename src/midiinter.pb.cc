// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: midiinter.proto

#include "midiinter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_midiinter_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_midiinter_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MidiTrack_CCData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_midiinter_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MidiTrack_MidiData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_midiinter_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MidiTrack_Plugin;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_midiinter_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_MidiTrack;
}  // namespace protobuf_midiinter_2eproto
class MidiTrack_MidiDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MidiTrack_MidiData>
      _instance;
} _MidiTrack_MidiData_default_instance_;
class MidiTrack_PluginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MidiTrack_Plugin>
      _instance;
} _MidiTrack_Plugin_default_instance_;
class MidiTrack_CCDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MidiTrack_CCData>
      _instance;
} _MidiTrack_CCData_default_instance_;
class MidiTrackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MidiTrack>
      _instance;
} _MidiTrack_default_instance_;
class ApplicationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Application>
      _instance;
} _Application_default_instance_;
namespace protobuf_midiinter_2eproto {
static void InitDefaultsMidiTrack_MidiData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MidiTrack_MidiData_default_instance_;
    new (ptr) ::MidiTrack_MidiData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MidiTrack_MidiData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MidiTrack_MidiData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMidiTrack_MidiData}, {}};

static void InitDefaultsMidiTrack_Plugin() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MidiTrack_Plugin_default_instance_;
    new (ptr) ::MidiTrack_Plugin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MidiTrack_Plugin::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MidiTrack_Plugin =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMidiTrack_Plugin}, {}};

static void InitDefaultsMidiTrack_CCData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MidiTrack_CCData_default_instance_;
    new (ptr) ::MidiTrack_CCData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MidiTrack_CCData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MidiTrack_CCData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMidiTrack_CCData}, {}};

static void InitDefaultsMidiTrack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MidiTrack_default_instance_;
    new (ptr) ::MidiTrack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MidiTrack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_MidiTrack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsMidiTrack}, {
      &protobuf_midiinter_2eproto::scc_info_MidiTrack_Plugin.base,
      &protobuf_midiinter_2eproto::scc_info_MidiTrack_MidiData.base,
      &protobuf_midiinter_2eproto::scc_info_MidiTrack_CCData.base,}};

static void InitDefaultsApplication() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Application_default_instance_;
    new (ptr) ::Application();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Application::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Application =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsApplication}, {
      &protobuf_midiinter_2eproto::scc_info_MidiTrack.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MidiTrack_MidiData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MidiTrack_Plugin.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MidiTrack_CCData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MidiTrack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Application.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MidiTrack_MidiData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MidiTrack_MidiData, total_dt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MidiTrack_MidiData, event_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MidiTrack_Plugin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MidiTrack_Plugin, plugin_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MidiTrack_Plugin, program_bank_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MidiTrack_CCData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MidiTrack_CCData, cc_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MidiTrack_CCData, x_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MidiTrack_CCData, y_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MidiTrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MidiTrack, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MidiTrack, master_plugin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MidiTrack, child_plugin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MidiTrack, midi_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MidiTrack, cc_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Application, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Application, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Application, total_dt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Application, midi_track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Application, blocksize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Application, sample_rate_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MidiTrack_MidiData)},
  { 7, -1, sizeof(::MidiTrack_Plugin)},
  { 14, -1, sizeof(::MidiTrack_CCData)},
  { 22, -1, sizeof(::MidiTrack)},
  { 32, -1, sizeof(::Application)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MidiTrack_MidiData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MidiTrack_Plugin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MidiTrack_CCData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MidiTrack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Application_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "midiinter.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017midiinter.proto\"\326\002\n\tMidiTrack\022\014\n\004name\030"
      "\001 \001(\t\022(\n\rmaster_plugin\030\003 \001(\0132\021.MidiTrack"
      ".Plugin\022\'\n\014child_plugin\030\004 \003(\0132\021.MidiTrac"
      "k.Plugin\022&\n\tmidi_data\030\005 \003(\0132\023.MidiTrack."
      "MidiData\022\"\n\007cc_data\030\006 \003(\0132\021.MidiTrack.CC"
      "Data\032+\n\010MidiData\022\020\n\010total_dt\030\001 \001(\005\022\r\n\005ev"
      "ent\030\002 \001(\005\0322\n\006Plugin\022\022\n\nplugin_url\030\001 \001(\t\022"
      "\024\n\014program_bank\030\002 \001(\014\032;\n\006CCData\022\017\n\007cc_ty"
      "pe\030\001 \001(\005\022\017\n\007x_value\030\002 \001(\005\022\017\n\007y_value\030\003 \001"
      "(\005\"u\n\013Application\022\014\n\004name\030\001 \001(\t\022\020\n\010total"
      "_dt\030\002 \001(\005\022\036\n\nmidi_track\030\003 \003(\0132\n.MidiTrac"
      "k\022\021\n\tblockSize\030\004 \001(\005\022\023\n\013sample_rate\030\005 \001("
      "\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 489);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "midiinter.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_midiinter_2eproto

// ===================================================================

void MidiTrack_MidiData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MidiTrack_MidiData::kTotalDtFieldNumber;
const int MidiTrack_MidiData::kEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MidiTrack_MidiData::MidiTrack_MidiData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_midiinter_2eproto::scc_info_MidiTrack_MidiData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MidiTrack.MidiData)
}
MidiTrack_MidiData::MidiTrack_MidiData(const MidiTrack_MidiData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_dt_, &from.total_dt_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_) -
    reinterpret_cast<char*>(&total_dt_)) + sizeof(event_));
  // @@protoc_insertion_point(copy_constructor:MidiTrack.MidiData)
}

void MidiTrack_MidiData::SharedCtor() {
  ::memset(&total_dt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_) -
      reinterpret_cast<char*>(&total_dt_)) + sizeof(event_));
}

MidiTrack_MidiData::~MidiTrack_MidiData() {
  // @@protoc_insertion_point(destructor:MidiTrack.MidiData)
  SharedDtor();
}

void MidiTrack_MidiData::SharedDtor() {
}

void MidiTrack_MidiData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MidiTrack_MidiData::descriptor() {
  ::protobuf_midiinter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_midiinter_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MidiTrack_MidiData& MidiTrack_MidiData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_midiinter_2eproto::scc_info_MidiTrack_MidiData.base);
  return *internal_default_instance();
}


void MidiTrack_MidiData::Clear() {
// @@protoc_insertion_point(message_clear_start:MidiTrack.MidiData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_dt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_) -
      reinterpret_cast<char*>(&total_dt_)) + sizeof(event_));
  _internal_metadata_.Clear();
}

bool MidiTrack_MidiData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MidiTrack.MidiData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 total_dt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_dt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MidiTrack.MidiData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MidiTrack.MidiData)
  return false;
#undef DO_
}

void MidiTrack_MidiData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MidiTrack.MidiData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_dt = 1;
  if (this->total_dt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_dt(), output);
  }

  // int32 event = 2;
  if (this->event() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->event(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MidiTrack.MidiData)
}

::google::protobuf::uint8* MidiTrack_MidiData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MidiTrack.MidiData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_dt = 1;
  if (this->total_dt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_dt(), target);
  }

  // int32 event = 2;
  if (this->event() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->event(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MidiTrack.MidiData)
  return target;
}

size_t MidiTrack_MidiData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MidiTrack.MidiData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 total_dt = 1;
  if (this->total_dt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_dt());
  }

  // int32 event = 2;
  if (this->event() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MidiTrack_MidiData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MidiTrack.MidiData)
  GOOGLE_DCHECK_NE(&from, this);
  const MidiTrack_MidiData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MidiTrack_MidiData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MidiTrack.MidiData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MidiTrack.MidiData)
    MergeFrom(*source);
  }
}

void MidiTrack_MidiData::MergeFrom(const MidiTrack_MidiData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MidiTrack.MidiData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_dt() != 0) {
    set_total_dt(from.total_dt());
  }
  if (from.event() != 0) {
    set_event(from.event());
  }
}

void MidiTrack_MidiData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MidiTrack.MidiData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MidiTrack_MidiData::CopyFrom(const MidiTrack_MidiData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MidiTrack.MidiData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MidiTrack_MidiData::IsInitialized() const {
  return true;
}

void MidiTrack_MidiData::Swap(MidiTrack_MidiData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MidiTrack_MidiData::InternalSwap(MidiTrack_MidiData* other) {
  using std::swap;
  swap(total_dt_, other->total_dt_);
  swap(event_, other->event_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MidiTrack_MidiData::GetMetadata() const {
  protobuf_midiinter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_midiinter_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MidiTrack_Plugin::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MidiTrack_Plugin::kPluginUrlFieldNumber;
const int MidiTrack_Plugin::kProgramBankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MidiTrack_Plugin::MidiTrack_Plugin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_midiinter_2eproto::scc_info_MidiTrack_Plugin.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MidiTrack.Plugin)
}
MidiTrack_Plugin::MidiTrack_Plugin(const MidiTrack_Plugin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  plugin_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.plugin_url().size() > 0) {
    plugin_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plugin_url_);
  }
  program_bank_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.program_bank().size() > 0) {
    program_bank_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.program_bank_);
  }
  // @@protoc_insertion_point(copy_constructor:MidiTrack.Plugin)
}

void MidiTrack_Plugin::SharedCtor() {
  plugin_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  program_bank_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MidiTrack_Plugin::~MidiTrack_Plugin() {
  // @@protoc_insertion_point(destructor:MidiTrack.Plugin)
  SharedDtor();
}

void MidiTrack_Plugin::SharedDtor() {
  plugin_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  program_bank_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MidiTrack_Plugin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MidiTrack_Plugin::descriptor() {
  ::protobuf_midiinter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_midiinter_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MidiTrack_Plugin& MidiTrack_Plugin::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_midiinter_2eproto::scc_info_MidiTrack_Plugin.base);
  return *internal_default_instance();
}


void MidiTrack_Plugin::Clear() {
// @@protoc_insertion_point(message_clear_start:MidiTrack.Plugin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plugin_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  program_bank_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool MidiTrack_Plugin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MidiTrack.Plugin)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string plugin_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plugin_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->plugin_url().data(), static_cast<int>(this->plugin_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MidiTrack.Plugin.plugin_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes program_bank = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_program_bank()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MidiTrack.Plugin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MidiTrack.Plugin)
  return false;
#undef DO_
}

void MidiTrack_Plugin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MidiTrack.Plugin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string plugin_url = 1;
  if (this->plugin_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plugin_url().data(), static_cast<int>(this->plugin_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MidiTrack.Plugin.plugin_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->plugin_url(), output);
  }

  // bytes program_bank = 2;
  if (this->program_bank().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->program_bank(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MidiTrack.Plugin)
}

::google::protobuf::uint8* MidiTrack_Plugin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MidiTrack.Plugin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string plugin_url = 1;
  if (this->plugin_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plugin_url().data(), static_cast<int>(this->plugin_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MidiTrack.Plugin.plugin_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->plugin_url(), target);
  }

  // bytes program_bank = 2;
  if (this->program_bank().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->program_bank(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MidiTrack.Plugin)
  return target;
}

size_t MidiTrack_Plugin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MidiTrack.Plugin)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string plugin_url = 1;
  if (this->plugin_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plugin_url());
  }

  // bytes program_bank = 2;
  if (this->program_bank().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->program_bank());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MidiTrack_Plugin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MidiTrack.Plugin)
  GOOGLE_DCHECK_NE(&from, this);
  const MidiTrack_Plugin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MidiTrack_Plugin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MidiTrack.Plugin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MidiTrack.Plugin)
    MergeFrom(*source);
  }
}

void MidiTrack_Plugin::MergeFrom(const MidiTrack_Plugin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MidiTrack.Plugin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.plugin_url().size() > 0) {

    plugin_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plugin_url_);
  }
  if (from.program_bank().size() > 0) {

    program_bank_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.program_bank_);
  }
}

void MidiTrack_Plugin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MidiTrack.Plugin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MidiTrack_Plugin::CopyFrom(const MidiTrack_Plugin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MidiTrack.Plugin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MidiTrack_Plugin::IsInitialized() const {
  return true;
}

void MidiTrack_Plugin::Swap(MidiTrack_Plugin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MidiTrack_Plugin::InternalSwap(MidiTrack_Plugin* other) {
  using std::swap;
  plugin_url_.Swap(&other->plugin_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  program_bank_.Swap(&other->program_bank_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MidiTrack_Plugin::GetMetadata() const {
  protobuf_midiinter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_midiinter_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MidiTrack_CCData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MidiTrack_CCData::kCcTypeFieldNumber;
const int MidiTrack_CCData::kXValueFieldNumber;
const int MidiTrack_CCData::kYValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MidiTrack_CCData::MidiTrack_CCData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_midiinter_2eproto::scc_info_MidiTrack_CCData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MidiTrack.CCData)
}
MidiTrack_CCData::MidiTrack_CCData(const MidiTrack_CCData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cc_type_, &from.cc_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_value_) -
    reinterpret_cast<char*>(&cc_type_)) + sizeof(y_value_));
  // @@protoc_insertion_point(copy_constructor:MidiTrack.CCData)
}

void MidiTrack_CCData::SharedCtor() {
  ::memset(&cc_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_value_) -
      reinterpret_cast<char*>(&cc_type_)) + sizeof(y_value_));
}

MidiTrack_CCData::~MidiTrack_CCData() {
  // @@protoc_insertion_point(destructor:MidiTrack.CCData)
  SharedDtor();
}

void MidiTrack_CCData::SharedDtor() {
}

void MidiTrack_CCData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MidiTrack_CCData::descriptor() {
  ::protobuf_midiinter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_midiinter_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MidiTrack_CCData& MidiTrack_CCData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_midiinter_2eproto::scc_info_MidiTrack_CCData.base);
  return *internal_default_instance();
}


void MidiTrack_CCData::Clear() {
// @@protoc_insertion_point(message_clear_start:MidiTrack.CCData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cc_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_value_) -
      reinterpret_cast<char*>(&cc_type_)) + sizeof(y_value_));
  _internal_metadata_.Clear();
}

bool MidiTrack_CCData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MidiTrack.CCData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 cc_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cc_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 x_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MidiTrack.CCData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MidiTrack.CCData)
  return false;
#undef DO_
}

void MidiTrack_CCData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MidiTrack.CCData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cc_type = 1;
  if (this->cc_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cc_type(), output);
  }

  // int32 x_value = 2;
  if (this->x_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x_value(), output);
  }

  // int32 y_value = 3;
  if (this->y_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MidiTrack.CCData)
}

::google::protobuf::uint8* MidiTrack_CCData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MidiTrack.CCData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cc_type = 1;
  if (this->cc_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cc_type(), target);
  }

  // int32 x_value = 2;
  if (this->x_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x_value(), target);
  }

  // int32 y_value = 3;
  if (this->y_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y_value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MidiTrack.CCData)
  return target;
}

size_t MidiTrack_CCData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MidiTrack.CCData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 cc_type = 1;
  if (this->cc_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cc_type());
  }

  // int32 x_value = 2;
  if (this->x_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x_value());
  }

  // int32 y_value = 3;
  if (this->y_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y_value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MidiTrack_CCData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MidiTrack.CCData)
  GOOGLE_DCHECK_NE(&from, this);
  const MidiTrack_CCData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MidiTrack_CCData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MidiTrack.CCData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MidiTrack.CCData)
    MergeFrom(*source);
  }
}

void MidiTrack_CCData::MergeFrom(const MidiTrack_CCData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MidiTrack.CCData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cc_type() != 0) {
    set_cc_type(from.cc_type());
  }
  if (from.x_value() != 0) {
    set_x_value(from.x_value());
  }
  if (from.y_value() != 0) {
    set_y_value(from.y_value());
  }
}

void MidiTrack_CCData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MidiTrack.CCData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MidiTrack_CCData::CopyFrom(const MidiTrack_CCData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MidiTrack.CCData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MidiTrack_CCData::IsInitialized() const {
  return true;
}

void MidiTrack_CCData::Swap(MidiTrack_CCData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MidiTrack_CCData::InternalSwap(MidiTrack_CCData* other) {
  using std::swap;
  swap(cc_type_, other->cc_type_);
  swap(x_value_, other->x_value_);
  swap(y_value_, other->y_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MidiTrack_CCData::GetMetadata() const {
  protobuf_midiinter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_midiinter_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MidiTrack::InitAsDefaultInstance() {
  ::_MidiTrack_default_instance_._instance.get_mutable()->master_plugin_ = const_cast< ::MidiTrack_Plugin*>(
      ::MidiTrack_Plugin::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MidiTrack::kNameFieldNumber;
const int MidiTrack::kMasterPluginFieldNumber;
const int MidiTrack::kChildPluginFieldNumber;
const int MidiTrack::kMidiDataFieldNumber;
const int MidiTrack::kCcDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MidiTrack::MidiTrack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_midiinter_2eproto::scc_info_MidiTrack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MidiTrack)
}
MidiTrack::MidiTrack(const MidiTrack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      child_plugin_(from.child_plugin_),
      midi_data_(from.midi_data_),
      cc_data_(from.cc_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_master_plugin()) {
    master_plugin_ = new ::MidiTrack_Plugin(*from.master_plugin_);
  } else {
    master_plugin_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MidiTrack)
}

void MidiTrack::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  master_plugin_ = NULL;
}

MidiTrack::~MidiTrack() {
  // @@protoc_insertion_point(destructor:MidiTrack)
  SharedDtor();
}

void MidiTrack::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete master_plugin_;
}

void MidiTrack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MidiTrack::descriptor() {
  ::protobuf_midiinter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_midiinter_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MidiTrack& MidiTrack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_midiinter_2eproto::scc_info_MidiTrack.base);
  return *internal_default_instance();
}


void MidiTrack::Clear() {
// @@protoc_insertion_point(message_clear_start:MidiTrack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  child_plugin_.Clear();
  midi_data_.Clear();
  cc_data_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && master_plugin_ != NULL) {
    delete master_plugin_;
  }
  master_plugin_ = NULL;
  _internal_metadata_.Clear();
}

bool MidiTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MidiTrack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MidiTrack.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MidiTrack.Plugin master_plugin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_master_plugin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MidiTrack.Plugin child_plugin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_child_plugin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MidiTrack.MidiData midi_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_midi_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MidiTrack.CCData cc_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cc_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MidiTrack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MidiTrack)
  return false;
#undef DO_
}

void MidiTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MidiTrack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MidiTrack.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .MidiTrack.Plugin master_plugin = 3;
  if (this->has_master_plugin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_master_plugin(), output);
  }

  // repeated .MidiTrack.Plugin child_plugin = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->child_plugin_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->child_plugin(static_cast<int>(i)),
      output);
  }

  // repeated .MidiTrack.MidiData midi_data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->midi_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->midi_data(static_cast<int>(i)),
      output);
  }

  // repeated .MidiTrack.CCData cc_data = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cc_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->cc_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MidiTrack)
}

::google::protobuf::uint8* MidiTrack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MidiTrack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MidiTrack.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .MidiTrack.Plugin master_plugin = 3;
  if (this->has_master_plugin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_master_plugin(), deterministic, target);
  }

  // repeated .MidiTrack.Plugin child_plugin = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->child_plugin_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->child_plugin(static_cast<int>(i)), deterministic, target);
  }

  // repeated .MidiTrack.MidiData midi_data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->midi_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->midi_data(static_cast<int>(i)), deterministic, target);
  }

  // repeated .MidiTrack.CCData cc_data = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cc_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->cc_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MidiTrack)
  return target;
}

size_t MidiTrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MidiTrack)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .MidiTrack.Plugin child_plugin = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->child_plugin_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->child_plugin(static_cast<int>(i)));
    }
  }

  // repeated .MidiTrack.MidiData midi_data = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->midi_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->midi_data(static_cast<int>(i)));
    }
  }

  // repeated .MidiTrack.CCData cc_data = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->cc_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cc_data(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .MidiTrack.Plugin master_plugin = 3;
  if (this->has_master_plugin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *master_plugin_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MidiTrack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MidiTrack)
  GOOGLE_DCHECK_NE(&from, this);
  const MidiTrack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MidiTrack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MidiTrack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MidiTrack)
    MergeFrom(*source);
  }
}

void MidiTrack::MergeFrom(const MidiTrack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MidiTrack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  child_plugin_.MergeFrom(from.child_plugin_);
  midi_data_.MergeFrom(from.midi_data_);
  cc_data_.MergeFrom(from.cc_data_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_master_plugin()) {
    mutable_master_plugin()->::MidiTrack_Plugin::MergeFrom(from.master_plugin());
  }
}

void MidiTrack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MidiTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MidiTrack::CopyFrom(const MidiTrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MidiTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MidiTrack::IsInitialized() const {
  return true;
}

void MidiTrack::Swap(MidiTrack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MidiTrack::InternalSwap(MidiTrack* other) {
  using std::swap;
  CastToBase(&child_plugin_)->InternalSwap(CastToBase(&other->child_plugin_));
  CastToBase(&midi_data_)->InternalSwap(CastToBase(&other->midi_data_));
  CastToBase(&cc_data_)->InternalSwap(CastToBase(&other->cc_data_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(master_plugin_, other->master_plugin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MidiTrack::GetMetadata() const {
  protobuf_midiinter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_midiinter_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Application::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Application::kNameFieldNumber;
const int Application::kTotalDtFieldNumber;
const int Application::kMidiTrackFieldNumber;
const int Application::kBlockSizeFieldNumber;
const int Application::kSampleRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Application::Application()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_midiinter_2eproto::scc_info_Application.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Application)
}
Application::Application(const Application& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      midi_track_(from.midi_track_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&total_dt_, &from.total_dt_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_rate_) -
    reinterpret_cast<char*>(&total_dt_)) + sizeof(sample_rate_));
  // @@protoc_insertion_point(copy_constructor:Application)
}

void Application::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_dt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_rate_) -
      reinterpret_cast<char*>(&total_dt_)) + sizeof(sample_rate_));
}

Application::~Application() {
  // @@protoc_insertion_point(destructor:Application)
  SharedDtor();
}

void Application::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Application::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Application::descriptor() {
  ::protobuf_midiinter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_midiinter_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Application& Application::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_midiinter_2eproto::scc_info_Application.base);
  return *internal_default_instance();
}


void Application::Clear() {
// @@protoc_insertion_point(message_clear_start:Application)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  midi_track_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_dt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_rate_) -
      reinterpret_cast<char*>(&total_dt_)) + sizeof(sample_rate_));
  _internal_metadata_.Clear();
}

bool Application::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Application)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Application.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 total_dt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_dt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MidiTrack midi_track = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_midi_track()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 blockSize = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blocksize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sample_rate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Application)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Application)
  return false;
#undef DO_
}

void Application::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Application)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Application.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 total_dt = 2;
  if (this->total_dt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_dt(), output);
  }

  // repeated .MidiTrack midi_track = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->midi_track_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->midi_track(static_cast<int>(i)),
      output);
  }

  // int32 blockSize = 4;
  if (this->blocksize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->blocksize(), output);
  }

  // int32 sample_rate = 5;
  if (this->sample_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sample_rate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Application)
}

::google::protobuf::uint8* Application::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Application)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Application.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 total_dt = 2;
  if (this->total_dt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_dt(), target);
  }

  // repeated .MidiTrack midi_track = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->midi_track_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->midi_track(static_cast<int>(i)), deterministic, target);
  }

  // int32 blockSize = 4;
  if (this->blocksize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->blocksize(), target);
  }

  // int32 sample_rate = 5;
  if (this->sample_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sample_rate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Application)
  return target;
}

size_t Application::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Application)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .MidiTrack midi_track = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->midi_track_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->midi_track(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 total_dt = 2;
  if (this->total_dt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_dt());
  }

  // int32 blockSize = 4;
  if (this->blocksize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->blocksize());
  }

  // int32 sample_rate = 5;
  if (this->sample_rate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sample_rate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Application::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Application)
  GOOGLE_DCHECK_NE(&from, this);
  const Application* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Application>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Application)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Application)
    MergeFrom(*source);
  }
}

void Application::MergeFrom(const Application& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Application)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  midi_track_.MergeFrom(from.midi_track_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.total_dt() != 0) {
    set_total_dt(from.total_dt());
  }
  if (from.blocksize() != 0) {
    set_blocksize(from.blocksize());
  }
  if (from.sample_rate() != 0) {
    set_sample_rate(from.sample_rate());
  }
}

void Application::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Application)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Application::CopyFrom(const Application& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Application)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Application::IsInitialized() const {
  return true;
}

void Application::Swap(Application* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Application::InternalSwap(Application* other) {
  using std::swap;
  CastToBase(&midi_track_)->InternalSwap(CastToBase(&other->midi_track_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(total_dt_, other->total_dt_);
  swap(blocksize_, other->blocksize_);
  swap(sample_rate_, other->sample_rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Application::GetMetadata() const {
  protobuf_midiinter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_midiinter_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MidiTrack_MidiData* Arena::CreateMaybeMessage< ::MidiTrack_MidiData >(Arena* arena) {
  return Arena::CreateInternal< ::MidiTrack_MidiData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MidiTrack_Plugin* Arena::CreateMaybeMessage< ::MidiTrack_Plugin >(Arena* arena) {
  return Arena::CreateInternal< ::MidiTrack_Plugin >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MidiTrack_CCData* Arena::CreateMaybeMessage< ::MidiTrack_CCData >(Arena* arena) {
  return Arena::CreateInternal< ::MidiTrack_CCData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MidiTrack* Arena::CreateMaybeMessage< ::MidiTrack >(Arena* arena) {
  return Arena::CreateInternal< ::MidiTrack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Application* Arena::CreateMaybeMessage< ::Application >(Arena* arena) {
  return Arena::CreateInternal< ::Application >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
