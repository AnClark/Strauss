// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: midiinter.proto
#define PROTOBUF_USE_DLLS
#ifndef PROTOBUF_INCLUDED_midiinter_2eproto
#define PROTOBUF_INCLUDED_midiinter_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_midiinter_2eproto 

namespace protobuf_midiinter_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_midiinter_2eproto
class Application;
class ApplicationDefaultTypeInternal;
extern ApplicationDefaultTypeInternal _Application_default_instance_;
class MidiTrack;
class MidiTrackDefaultTypeInternal;
extern MidiTrackDefaultTypeInternal _MidiTrack_default_instance_;
class MidiTrack_CCData;
class MidiTrack_CCDataDefaultTypeInternal;
extern MidiTrack_CCDataDefaultTypeInternal _MidiTrack_CCData_default_instance_;
class MidiTrack_MidiData;
class MidiTrack_MidiDataDefaultTypeInternal;
extern MidiTrack_MidiDataDefaultTypeInternal _MidiTrack_MidiData_default_instance_;
class MidiTrack_Plugin;
class MidiTrack_PluginDefaultTypeInternal;
extern MidiTrack_PluginDefaultTypeInternal _MidiTrack_Plugin_default_instance_;
namespace google {
namespace protobuf {
template<> ::Application* Arena::CreateMaybeMessage<::Application>(Arena*);
template<> ::MidiTrack* Arena::CreateMaybeMessage<::MidiTrack>(Arena*);
template<> ::MidiTrack_CCData* Arena::CreateMaybeMessage<::MidiTrack_CCData>(Arena*);
template<> ::MidiTrack_MidiData* Arena::CreateMaybeMessage<::MidiTrack_MidiData>(Arena*);
template<> ::MidiTrack_Plugin* Arena::CreateMaybeMessage<::MidiTrack_Plugin>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class MidiTrack_MidiData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MidiTrack.MidiData) */ {
 public:
  MidiTrack_MidiData();
  virtual ~MidiTrack_MidiData();

  MidiTrack_MidiData(const MidiTrack_MidiData& from);

  inline MidiTrack_MidiData& operator=(const MidiTrack_MidiData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MidiTrack_MidiData(MidiTrack_MidiData&& from) noexcept
    : MidiTrack_MidiData() {
    *this = ::std::move(from);
  }

  inline MidiTrack_MidiData& operator=(MidiTrack_MidiData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MidiTrack_MidiData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MidiTrack_MidiData* internal_default_instance() {
    return reinterpret_cast<const MidiTrack_MidiData*>(
               &_MidiTrack_MidiData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MidiTrack_MidiData* other);
  friend void swap(MidiTrack_MidiData& a, MidiTrack_MidiData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MidiTrack_MidiData* New() const final {
    return CreateMaybeMessage<MidiTrack_MidiData>(NULL);
  }

  MidiTrack_MidiData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MidiTrack_MidiData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MidiTrack_MidiData& from);
  void MergeFrom(const MidiTrack_MidiData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MidiTrack_MidiData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 total_dt = 1;
  void clear_total_dt();
  static const int kTotalDtFieldNumber = 1;
  ::google::protobuf::int32 total_dt() const;
  void set_total_dt(::google::protobuf::int32 value);

  // int32 event = 2;
  void clear_event();
  static const int kEventFieldNumber = 2;
  ::google::protobuf::int32 event() const;
  void set_event(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MidiTrack.MidiData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 total_dt_;
  ::google::protobuf::int32 event_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_midiinter_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MidiTrack_Plugin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MidiTrack.Plugin) */ {
 public:
  MidiTrack_Plugin();
  virtual ~MidiTrack_Plugin();

  MidiTrack_Plugin(const MidiTrack_Plugin& from);

  inline MidiTrack_Plugin& operator=(const MidiTrack_Plugin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MidiTrack_Plugin(MidiTrack_Plugin&& from) noexcept
    : MidiTrack_Plugin() {
    *this = ::std::move(from);
  }

  inline MidiTrack_Plugin& operator=(MidiTrack_Plugin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MidiTrack_Plugin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MidiTrack_Plugin* internal_default_instance() {
    return reinterpret_cast<const MidiTrack_Plugin*>(
               &_MidiTrack_Plugin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MidiTrack_Plugin* other);
  friend void swap(MidiTrack_Plugin& a, MidiTrack_Plugin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MidiTrack_Plugin* New() const final {
    return CreateMaybeMessage<MidiTrack_Plugin>(NULL);
  }

  MidiTrack_Plugin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MidiTrack_Plugin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MidiTrack_Plugin& from);
  void MergeFrom(const MidiTrack_Plugin& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MidiTrack_Plugin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string plugin_url = 1;
  void clear_plugin_url();
  static const int kPluginUrlFieldNumber = 1;
  const ::std::string& plugin_url() const;
  void set_plugin_url(const ::std::string& value);
  #if LANG_CXX11
  void set_plugin_url(::std::string&& value);
  #endif
  void set_plugin_url(const char* value);
  void set_plugin_url(const char* value, size_t size);
  ::std::string* mutable_plugin_url();
  ::std::string* release_plugin_url();
  void set_allocated_plugin_url(::std::string* plugin_url);

  // bytes program_bank = 2;
  void clear_program_bank();
  static const int kProgramBankFieldNumber = 2;
  const ::std::string& program_bank() const;
  void set_program_bank(const ::std::string& value);
  #if LANG_CXX11
  void set_program_bank(::std::string&& value);
  #endif
  void set_program_bank(const char* value);
  void set_program_bank(const void* value, size_t size);
  ::std::string* mutable_program_bank();
  ::std::string* release_program_bank();
  void set_allocated_program_bank(::std::string* program_bank);

  // @@protoc_insertion_point(class_scope:MidiTrack.Plugin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr plugin_url_;
  ::google::protobuf::internal::ArenaStringPtr program_bank_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_midiinter_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MidiTrack_CCData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MidiTrack.CCData) */ {
 public:
  MidiTrack_CCData();
  virtual ~MidiTrack_CCData();

  MidiTrack_CCData(const MidiTrack_CCData& from);

  inline MidiTrack_CCData& operator=(const MidiTrack_CCData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MidiTrack_CCData(MidiTrack_CCData&& from) noexcept
    : MidiTrack_CCData() {
    *this = ::std::move(from);
  }

  inline MidiTrack_CCData& operator=(MidiTrack_CCData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MidiTrack_CCData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MidiTrack_CCData* internal_default_instance() {
    return reinterpret_cast<const MidiTrack_CCData*>(
               &_MidiTrack_CCData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MidiTrack_CCData* other);
  friend void swap(MidiTrack_CCData& a, MidiTrack_CCData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MidiTrack_CCData* New() const final {
    return CreateMaybeMessage<MidiTrack_CCData>(NULL);
  }

  MidiTrack_CCData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MidiTrack_CCData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MidiTrack_CCData& from);
  void MergeFrom(const MidiTrack_CCData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MidiTrack_CCData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 cc_type = 1;
  void clear_cc_type();
  static const int kCcTypeFieldNumber = 1;
  ::google::protobuf::int32 cc_type() const;
  void set_cc_type(::google::protobuf::int32 value);

  // int32 x_value = 2;
  void clear_x_value();
  static const int kXValueFieldNumber = 2;
  ::google::protobuf::int32 x_value() const;
  void set_x_value(::google::protobuf::int32 value);

  // int32 y_value = 3;
  void clear_y_value();
  static const int kYValueFieldNumber = 3;
  ::google::protobuf::int32 y_value() const;
  void set_y_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MidiTrack.CCData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 cc_type_;
  ::google::protobuf::int32 x_value_;
  ::google::protobuf::int32 y_value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_midiinter_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MidiTrack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MidiTrack) */ {
 public:
  MidiTrack();
  virtual ~MidiTrack();

  MidiTrack(const MidiTrack& from);

  inline MidiTrack& operator=(const MidiTrack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MidiTrack(MidiTrack&& from) noexcept
    : MidiTrack() {
    *this = ::std::move(from);
  }

  inline MidiTrack& operator=(MidiTrack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MidiTrack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MidiTrack* internal_default_instance() {
    return reinterpret_cast<const MidiTrack*>(
               &_MidiTrack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(MidiTrack* other);
  friend void swap(MidiTrack& a, MidiTrack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MidiTrack* New() const final {
    return CreateMaybeMessage<MidiTrack>(NULL);
  }

  MidiTrack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MidiTrack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MidiTrack& from);
  void MergeFrom(const MidiTrack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MidiTrack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MidiTrack_MidiData MidiData;
  typedef MidiTrack_Plugin Plugin;
  typedef MidiTrack_CCData CCData;

  // accessors -------------------------------------------------------

  // repeated .MidiTrack.Plugin child_plugin = 4;
  int child_plugin_size() const;
  void clear_child_plugin();
  static const int kChildPluginFieldNumber = 4;
  ::MidiTrack_Plugin* mutable_child_plugin(int index);
  ::google::protobuf::RepeatedPtrField< ::MidiTrack_Plugin >*
      mutable_child_plugin();
  const ::MidiTrack_Plugin& child_plugin(int index) const;
  ::MidiTrack_Plugin* add_child_plugin();
  const ::google::protobuf::RepeatedPtrField< ::MidiTrack_Plugin >&
      child_plugin() const;

  // repeated .MidiTrack.MidiData midi_data = 5;
  int midi_data_size() const;
  void clear_midi_data();
  static const int kMidiDataFieldNumber = 5;
  ::MidiTrack_MidiData* mutable_midi_data(int index);
  ::google::protobuf::RepeatedPtrField< ::MidiTrack_MidiData >*
      mutable_midi_data();
  const ::MidiTrack_MidiData& midi_data(int index) const;
  ::MidiTrack_MidiData* add_midi_data();
  const ::google::protobuf::RepeatedPtrField< ::MidiTrack_MidiData >&
      midi_data() const;

  // repeated .MidiTrack.CCData cc_data = 6;
  int cc_data_size() const;
  void clear_cc_data();
  static const int kCcDataFieldNumber = 6;
  ::MidiTrack_CCData* mutable_cc_data(int index);
  ::google::protobuf::RepeatedPtrField< ::MidiTrack_CCData >*
      mutable_cc_data();
  const ::MidiTrack_CCData& cc_data(int index) const;
  ::MidiTrack_CCData* add_cc_data();
  const ::google::protobuf::RepeatedPtrField< ::MidiTrack_CCData >&
      cc_data() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .MidiTrack.Plugin master_plugin = 3;
  bool has_master_plugin() const;
  void clear_master_plugin();
  static const int kMasterPluginFieldNumber = 3;
  private:
  const ::MidiTrack_Plugin& _internal_master_plugin() const;
  public:
  const ::MidiTrack_Plugin& master_plugin() const;
  ::MidiTrack_Plugin* release_master_plugin();
  ::MidiTrack_Plugin* mutable_master_plugin();
  void set_allocated_master_plugin(::MidiTrack_Plugin* master_plugin);

  // @@protoc_insertion_point(class_scope:MidiTrack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::MidiTrack_Plugin > child_plugin_;
  ::google::protobuf::RepeatedPtrField< ::MidiTrack_MidiData > midi_data_;
  ::google::protobuf::RepeatedPtrField< ::MidiTrack_CCData > cc_data_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::MidiTrack_Plugin* master_plugin_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_midiinter_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Application : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Application) */ {
 public:
  Application();
  virtual ~Application();

  Application(const Application& from);

  inline Application& operator=(const Application& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Application(Application&& from) noexcept
    : Application() {
    *this = ::std::move(from);
  }

  inline Application& operator=(Application&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Application& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Application* internal_default_instance() {
    return reinterpret_cast<const Application*>(
               &_Application_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Application* other);
  friend void swap(Application& a, Application& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Application* New() const final {
    return CreateMaybeMessage<Application>(NULL);
  }

  Application* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Application>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Application& from);
  void MergeFrom(const Application& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Application* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MidiTrack midi_track = 3;
  int midi_track_size() const;
  void clear_midi_track();
  static const int kMidiTrackFieldNumber = 3;
  ::MidiTrack* mutable_midi_track(int index);
  ::google::protobuf::RepeatedPtrField< ::MidiTrack >*
      mutable_midi_track();
  const ::MidiTrack& midi_track(int index) const;
  ::MidiTrack* add_midi_track();
  const ::google::protobuf::RepeatedPtrField< ::MidiTrack >&
      midi_track() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 total_dt = 2;
  void clear_total_dt();
  static const int kTotalDtFieldNumber = 2;
  ::google::protobuf::int32 total_dt() const;
  void set_total_dt(::google::protobuf::int32 value);

  // int32 blockSize = 4;
  void clear_blocksize();
  static const int kBlockSizeFieldNumber = 4;
  ::google::protobuf::int32 blocksize() const;
  void set_blocksize(::google::protobuf::int32 value);

  // int32 sample_rate = 5;
  void clear_sample_rate();
  static const int kSampleRateFieldNumber = 5;
  ::google::protobuf::int32 sample_rate() const;
  void set_sample_rate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Application)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::MidiTrack > midi_track_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 total_dt_;
  ::google::protobuf::int32 blocksize_;
  ::google::protobuf::int32 sample_rate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_midiinter_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MidiTrack_MidiData

// int32 total_dt = 1;
inline void MidiTrack_MidiData::clear_total_dt() {
  total_dt_ = 0;
}
inline ::google::protobuf::int32 MidiTrack_MidiData::total_dt() const {
  // @@protoc_insertion_point(field_get:MidiTrack.MidiData.total_dt)
  return total_dt_;
}
inline void MidiTrack_MidiData::set_total_dt(::google::protobuf::int32 value) {
  
  total_dt_ = value;
  // @@protoc_insertion_point(field_set:MidiTrack.MidiData.total_dt)
}

// int32 event = 2;
inline void MidiTrack_MidiData::clear_event() {
  event_ = 0;
}
inline ::google::protobuf::int32 MidiTrack_MidiData::event() const {
  // @@protoc_insertion_point(field_get:MidiTrack.MidiData.event)
  return event_;
}
inline void MidiTrack_MidiData::set_event(::google::protobuf::int32 value) {
  
  event_ = value;
  // @@protoc_insertion_point(field_set:MidiTrack.MidiData.event)
}

// -------------------------------------------------------------------

// MidiTrack_Plugin

// string plugin_url = 1;
inline void MidiTrack_Plugin::clear_plugin_url() {
  plugin_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MidiTrack_Plugin::plugin_url() const {
  // @@protoc_insertion_point(field_get:MidiTrack.Plugin.plugin_url)
  return plugin_url_.GetNoArena();
}
inline void MidiTrack_Plugin::set_plugin_url(const ::std::string& value) {
  
  plugin_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MidiTrack.Plugin.plugin_url)
}
#if LANG_CXX11
inline void MidiTrack_Plugin::set_plugin_url(::std::string&& value) {
  
  plugin_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MidiTrack.Plugin.plugin_url)
}
#endif
inline void MidiTrack_Plugin::set_plugin_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plugin_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MidiTrack.Plugin.plugin_url)
}
inline void MidiTrack_Plugin::set_plugin_url(const char* value, size_t size) {
  
  plugin_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MidiTrack.Plugin.plugin_url)
}
inline ::std::string* MidiTrack_Plugin::mutable_plugin_url() {
  
  // @@protoc_insertion_point(field_mutable:MidiTrack.Plugin.plugin_url)
  return plugin_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MidiTrack_Plugin::release_plugin_url() {
  // @@protoc_insertion_point(field_release:MidiTrack.Plugin.plugin_url)
  
  return plugin_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MidiTrack_Plugin::set_allocated_plugin_url(::std::string* plugin_url) {
  if (plugin_url != NULL) {
    
  } else {
    
  }
  plugin_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plugin_url);
  // @@protoc_insertion_point(field_set_allocated:MidiTrack.Plugin.plugin_url)
}

// bytes program_bank = 2;
inline void MidiTrack_Plugin::clear_program_bank() {
  program_bank_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MidiTrack_Plugin::program_bank() const {
  // @@protoc_insertion_point(field_get:MidiTrack.Plugin.program_bank)
  return program_bank_.GetNoArena();
}
inline void MidiTrack_Plugin::set_program_bank(const ::std::string& value) {
  
  program_bank_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MidiTrack.Plugin.program_bank)
}
#if LANG_CXX11
inline void MidiTrack_Plugin::set_program_bank(::std::string&& value) {
  
  program_bank_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MidiTrack.Plugin.program_bank)
}
#endif
inline void MidiTrack_Plugin::set_program_bank(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  program_bank_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MidiTrack.Plugin.program_bank)
}
inline void MidiTrack_Plugin::set_program_bank(const void* value, size_t size) {
  
  program_bank_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MidiTrack.Plugin.program_bank)
}
inline ::std::string* MidiTrack_Plugin::mutable_program_bank() {
  
  // @@protoc_insertion_point(field_mutable:MidiTrack.Plugin.program_bank)
  return program_bank_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MidiTrack_Plugin::release_program_bank() {
  // @@protoc_insertion_point(field_release:MidiTrack.Plugin.program_bank)
  
  return program_bank_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MidiTrack_Plugin::set_allocated_program_bank(::std::string* program_bank) {
  if (program_bank != NULL) {
    
  } else {
    
  }
  program_bank_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), program_bank);
  // @@protoc_insertion_point(field_set_allocated:MidiTrack.Plugin.program_bank)
}

// -------------------------------------------------------------------

// MidiTrack_CCData

// int32 cc_type = 1;
inline void MidiTrack_CCData::clear_cc_type() {
  cc_type_ = 0;
}
inline ::google::protobuf::int32 MidiTrack_CCData::cc_type() const {
  // @@protoc_insertion_point(field_get:MidiTrack.CCData.cc_type)
  return cc_type_;
}
inline void MidiTrack_CCData::set_cc_type(::google::protobuf::int32 value) {
  
  cc_type_ = value;
  // @@protoc_insertion_point(field_set:MidiTrack.CCData.cc_type)
}

// int32 x_value = 2;
inline void MidiTrack_CCData::clear_x_value() {
  x_value_ = 0;
}
inline ::google::protobuf::int32 MidiTrack_CCData::x_value() const {
  // @@protoc_insertion_point(field_get:MidiTrack.CCData.x_value)
  return x_value_;
}
inline void MidiTrack_CCData::set_x_value(::google::protobuf::int32 value) {
  
  x_value_ = value;
  // @@protoc_insertion_point(field_set:MidiTrack.CCData.x_value)
}

// int32 y_value = 3;
inline void MidiTrack_CCData::clear_y_value() {
  y_value_ = 0;
}
inline ::google::protobuf::int32 MidiTrack_CCData::y_value() const {
  // @@protoc_insertion_point(field_get:MidiTrack.CCData.y_value)
  return y_value_;
}
inline void MidiTrack_CCData::set_y_value(::google::protobuf::int32 value) {
  
  y_value_ = value;
  // @@protoc_insertion_point(field_set:MidiTrack.CCData.y_value)
}

// -------------------------------------------------------------------

// MidiTrack

// string name = 1;
inline void MidiTrack::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MidiTrack::name() const {
  // @@protoc_insertion_point(field_get:MidiTrack.name)
  return name_.GetNoArena();
}
inline void MidiTrack::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MidiTrack.name)
}
#if LANG_CXX11
inline void MidiTrack::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MidiTrack.name)
}
#endif
inline void MidiTrack::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MidiTrack.name)
}
inline void MidiTrack::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MidiTrack.name)
}
inline ::std::string* MidiTrack::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:MidiTrack.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MidiTrack::release_name() {
  // @@protoc_insertion_point(field_release:MidiTrack.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MidiTrack::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MidiTrack.name)
}

// .MidiTrack.Plugin master_plugin = 3;
inline bool MidiTrack::has_master_plugin() const {
  return this != internal_default_instance() && master_plugin_ != NULL;
}
inline void MidiTrack::clear_master_plugin() {
  if (GetArenaNoVirtual() == NULL && master_plugin_ != NULL) {
    delete master_plugin_;
  }
  master_plugin_ = NULL;
}
inline const ::MidiTrack_Plugin& MidiTrack::_internal_master_plugin() const {
  return *master_plugin_;
}
inline const ::MidiTrack_Plugin& MidiTrack::master_plugin() const {
  const ::MidiTrack_Plugin* p = master_plugin_;
  // @@protoc_insertion_point(field_get:MidiTrack.master_plugin)
  return p != NULL ? *p : *reinterpret_cast<const ::MidiTrack_Plugin*>(
      &::_MidiTrack_Plugin_default_instance_);
}
inline ::MidiTrack_Plugin* MidiTrack::release_master_plugin() {
  // @@protoc_insertion_point(field_release:MidiTrack.master_plugin)
  
  ::MidiTrack_Plugin* temp = master_plugin_;
  master_plugin_ = NULL;
  return temp;
}
inline ::MidiTrack_Plugin* MidiTrack::mutable_master_plugin() {
  
  if (master_plugin_ == NULL) {
    auto* p = CreateMaybeMessage<::MidiTrack_Plugin>(GetArenaNoVirtual());
    master_plugin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MidiTrack.master_plugin)
  return master_plugin_;
}
inline void MidiTrack::set_allocated_master_plugin(::MidiTrack_Plugin* master_plugin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete master_plugin_;
  }
  if (master_plugin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      master_plugin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, master_plugin, submessage_arena);
    }
    
  } else {
    
  }
  master_plugin_ = master_plugin;
  // @@protoc_insertion_point(field_set_allocated:MidiTrack.master_plugin)
}

// repeated .MidiTrack.Plugin child_plugin = 4;
inline int MidiTrack::child_plugin_size() const {
  return child_plugin_.size();
}
inline void MidiTrack::clear_child_plugin() {
  child_plugin_.Clear();
}
inline ::MidiTrack_Plugin* MidiTrack::mutable_child_plugin(int index) {
  // @@protoc_insertion_point(field_mutable:MidiTrack.child_plugin)
  return child_plugin_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MidiTrack_Plugin >*
MidiTrack::mutable_child_plugin() {
  // @@protoc_insertion_point(field_mutable_list:MidiTrack.child_plugin)
  return &child_plugin_;
}
inline const ::MidiTrack_Plugin& MidiTrack::child_plugin(int index) const {
  // @@protoc_insertion_point(field_get:MidiTrack.child_plugin)
  return child_plugin_.Get(index);
}
inline ::MidiTrack_Plugin* MidiTrack::add_child_plugin() {
  // @@protoc_insertion_point(field_add:MidiTrack.child_plugin)
  return child_plugin_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MidiTrack_Plugin >&
MidiTrack::child_plugin() const {
  // @@protoc_insertion_point(field_list:MidiTrack.child_plugin)
  return child_plugin_;
}

// repeated .MidiTrack.MidiData midi_data = 5;
inline int MidiTrack::midi_data_size() const {
  return midi_data_.size();
}
inline void MidiTrack::clear_midi_data() {
  midi_data_.Clear();
}
inline ::MidiTrack_MidiData* MidiTrack::mutable_midi_data(int index) {
  // @@protoc_insertion_point(field_mutable:MidiTrack.midi_data)
  return midi_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MidiTrack_MidiData >*
MidiTrack::mutable_midi_data() {
  // @@protoc_insertion_point(field_mutable_list:MidiTrack.midi_data)
  return &midi_data_;
}
inline const ::MidiTrack_MidiData& MidiTrack::midi_data(int index) const {
  // @@protoc_insertion_point(field_get:MidiTrack.midi_data)
  return midi_data_.Get(index);
}
inline ::MidiTrack_MidiData* MidiTrack::add_midi_data() {
  // @@protoc_insertion_point(field_add:MidiTrack.midi_data)
  return midi_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MidiTrack_MidiData >&
MidiTrack::midi_data() const {
  // @@protoc_insertion_point(field_list:MidiTrack.midi_data)
  return midi_data_;
}

// repeated .MidiTrack.CCData cc_data = 6;
inline int MidiTrack::cc_data_size() const {
  return cc_data_.size();
}
inline void MidiTrack::clear_cc_data() {
  cc_data_.Clear();
}
inline ::MidiTrack_CCData* MidiTrack::mutable_cc_data(int index) {
  // @@protoc_insertion_point(field_mutable:MidiTrack.cc_data)
  return cc_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MidiTrack_CCData >*
MidiTrack::mutable_cc_data() {
  // @@protoc_insertion_point(field_mutable_list:MidiTrack.cc_data)
  return &cc_data_;
}
inline const ::MidiTrack_CCData& MidiTrack::cc_data(int index) const {
  // @@protoc_insertion_point(field_get:MidiTrack.cc_data)
  return cc_data_.Get(index);
}
inline ::MidiTrack_CCData* MidiTrack::add_cc_data() {
  // @@protoc_insertion_point(field_add:MidiTrack.cc_data)
  return cc_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MidiTrack_CCData >&
MidiTrack::cc_data() const {
  // @@protoc_insertion_point(field_list:MidiTrack.cc_data)
  return cc_data_;
}

// -------------------------------------------------------------------

// Application

// string name = 1;
inline void Application::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Application::name() const {
  // @@protoc_insertion_point(field_get:Application.name)
  return name_.GetNoArena();
}
inline void Application::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Application.name)
}
#if LANG_CXX11
inline void Application::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Application.name)
}
#endif
inline void Application::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Application.name)
}
inline void Application::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Application.name)
}
inline ::std::string* Application::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Application.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Application::release_name() {
  // @@protoc_insertion_point(field_release:Application.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Application::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Application.name)
}

// int32 total_dt = 2;
inline void Application::clear_total_dt() {
  total_dt_ = 0;
}
inline ::google::protobuf::int32 Application::total_dt() const {
  // @@protoc_insertion_point(field_get:Application.total_dt)
  return total_dt_;
}
inline void Application::set_total_dt(::google::protobuf::int32 value) {
  
  total_dt_ = value;
  // @@protoc_insertion_point(field_set:Application.total_dt)
}

// repeated .MidiTrack midi_track = 3;
inline int Application::midi_track_size() const {
  return midi_track_.size();
}
inline void Application::clear_midi_track() {
  midi_track_.Clear();
}
inline ::MidiTrack* Application::mutable_midi_track(int index) {
  // @@protoc_insertion_point(field_mutable:Application.midi_track)
  return midi_track_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MidiTrack >*
Application::mutable_midi_track() {
  // @@protoc_insertion_point(field_mutable_list:Application.midi_track)
  return &midi_track_;
}
inline const ::MidiTrack& Application::midi_track(int index) const {
  // @@protoc_insertion_point(field_get:Application.midi_track)
  return midi_track_.Get(index);
}
inline ::MidiTrack* Application::add_midi_track() {
  // @@protoc_insertion_point(field_add:Application.midi_track)
  return midi_track_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MidiTrack >&
Application::midi_track() const {
  // @@protoc_insertion_point(field_list:Application.midi_track)
  return midi_track_;
}

// int32 blockSize = 4;
inline void Application::clear_blocksize() {
  blocksize_ = 0;
}
inline ::google::protobuf::int32 Application::blocksize() const {
  // @@protoc_insertion_point(field_get:Application.blockSize)
  return blocksize_;
}
inline void Application::set_blocksize(::google::protobuf::int32 value) {
  
  blocksize_ = value;
  // @@protoc_insertion_point(field_set:Application.blockSize)
}

// int32 sample_rate = 5;
inline void Application::clear_sample_rate() {
  sample_rate_ = 0;
}
inline ::google::protobuf::int32 Application::sample_rate() const {
  // @@protoc_insertion_point(field_get:Application.sample_rate)
  return sample_rate_;
}
inline void Application::set_sample_rate(::google::protobuf::int32 value) {
  
  sample_rate_ = value;
  // @@protoc_insertion_point(field_set:Application.sample_rate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_midiinter_2eproto
